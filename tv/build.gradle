apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'
apply plugin: 'com.jakewharton.butterknife'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
        mavenCentral()
    }

    dependencies {
        classpath 'com.android.tools.build:gradle:2.3.0'
        classpath 'me.tatarka.retrolambda.projectlombok:lombok.ast:0.2.3.a2'
        classpath 'me.tatarka:gradle-retrolambda:3.3.0-beta4'
        classpath 'com.jakewharton:butterknife-gradle-plugin:8.5.1'}
}


android {
    compileSdkVersion 25
    buildToolsVersion "25.0.1"
    defaultConfig {
        applicationId "uux.com.uuxplay"
        minSdkVersion 21
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])
    compile 'com.android.support:leanback-v17:25.3.0'
    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.jakewharton.timber:timber:4.5.1'
    compile 'io.reactivex.rxjava2:rxjava:2.0.7'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    compile 'com.squareup.retrofit2:adapter-rxjava2:2.2.0'
    compile 'com.squareup.retrofit2:converter-gson:2.2.0'
    compile 'com.squareup.retrofit2:retrofit:2.2.0'
    // View Injection:
    compile 'com.jakewharton:butterknife:8.5.1'
    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'
}

String java7 = getJavaVersion(7)
String java8 = getJavaVersion(8)

retrolambda {
    jdk java8
    oldJdk java7
    javaVersion JavaVersion.VERSION_1_7
    defaultMethods false
    incremental true
}

String getJavaVersion(Integer v) {
    def envVar = v == 7 ? System.getenv("JAVA_HOME") : System.getenv("JAVA8_HOME")
    if (envVar != null && envVar.trim() != "") {
        return envVar
    }
    def sout = new StringBuffer()
    def proc = "/usr/libexec/java_home -v 1.$v".execute()
    proc.consumeProcessOutput(sout, new StringBuffer())
    proc.waitForOrKill(1000)
    def javaHome = sout.toString().replace("\n", "").replace("\r", "")
    return javaHome
}